#!/usr/bin/env python
#
# A user provides a condor submission file, as well as some additional
# cloud scheduler / OpenStack parameters:
# image_uri:    canfar:uuid
#                    or
#               canfar:tenant_name/image_name
# flavor:       hardware profile for the cloud
# This script validates these inputs.

import argparse
import collections
import keystoneclient.v2_0.client as ksclient
import novaclient.v1_1.client as nclient
import glanceclient.v2.client as glclient
import json
import os
import re
import requests
import sys
import uuid

# Required parameters and related regex
req_regex = collections.OrderedDict(
    [ ['Requirements', 'VMType\s*=\?=\s*\\"(.*?)\\"[\s\\\]*&&[\s\\\]*Arch\s*==\s*\\"x86_64\\"'],
      ['+VMAMI', '\\"canfar:(.*?)\\"'],
      ['+VMInstanceType', '\\"canfar:(.*?)\\"' ],
      ['+VMAMIConfig','\\"(.*?)\\"'] ])

yaml_url="https://raw.githubusercontent.com/canfar/openstack-sandbox/master/vm_config/cloud_config.yml"

# OpenStack auth configuration / defaults.
# Take OS_* variables if provided (with following defaults).
# command-line overrides OS_*
if 'OS_AUTH_URL' not in os.environ:
    os.environ['OS_AUTH_URL'] = 'https://nefos.westgrid.ca:5000/v2.0'
if 'OS_USERNAME' not in os.environ and 'USER' in os.environ:
    os.environ['OS_USERNAME'] = os.environ['USER']+'-canfar'

auth = {'username':'',
        'password':'',
        'tenant_name' : '',
        'auth_url':''}

try:
    # Parse command line
    description = '''
    Validate job submission
    '''
    parser = argparse.ArgumentParser(description=description)

    parser.add_argument('jobfile',help='job description file')
    parser.add_argument('image_uri',help='VM image for job, can be "canfar:image_uuid" or "canfar:tenant_name/image_name" (this image tenant_name need not match auth --tenant_name')
    parser.add_argument('flavor',help='a valid hardware flavor')
    parser.add_argument('--username',help='user name if OS_USERNAME not set')
    parser.add_argument('--password',help='password if OS_PASSWORD not set')
    parser.add_argument('--tenant_name',
                        help='tenant_name if OS_TENANT_NAME not set (for authentication only - not required)')
    parser.add_argument('--auth_url',help='auth URL if OS_AUTH_URL not set')

    parser.add_argument('-v','--verbose',default=False,
                        help='verbose output',action='store_true')

    args,extra_args = parser.parse_known_args()

    # Obtain auth parameters from command-line / environment
    for key in auth:
        osvar = 'OS_'+key.upper()
        if eval( 'args.'+key ):
            auth[key] = eval( 'args.'+key )
        elif osvar in os.environ:
            auth[key] = os.environ[osvar]
        elif key == 'tenant_name':
            # If not set by user we will discover a tenant ourselves
            pass
        else:
            raise Exception("Neither --%s nor %s set in the environment" \
                % (key, osvar))

    jobfile = args.jobfile
    image_uri = args.image_uri
    flavor = args.flavor

    if args.verbose:
        print "auth_url: %s\nusername: %s\npassword: HIDDEN\ntenant_name: %s\njobfile: %s" % \
            (auth['auth_url'],auth['username'],auth['tenant_name'] or 'NOT SET',
             jobfile)

    # Check for required parameters in jobfile
    try:
        jobfile_data = open(jobfile,'r').read()
    except:
        raise Exception("Error reading the contents of "+jobfile)

    #for req in req_regex:
    #    regex = req+"\s*=\s*"+req_regex[req]
    #    if req[0] == '+':
            # Parameters that start with + need to be escaped in regex
    #        regex = '\\'+regex
    #    match = re.findall(regex,jobfile_data,re.MULTILINE)

    #    if not match:
    #        msg = "Parameter '%s' not defined correctly in jobfile." % req
    #        msg = msg+jobfile_example
    #        raise Exception(msg)

    #    if req == 'Requirements':
    #        imagename=match[0]
            
    #    if req == '+VMAMI':
            # We used OrderedDict so we know +VMAMI check after Requirements
    #        if match[0] != imagename:
    #            msg = "VM Image name in Requirements '" + \
    #                            imagename + "' does not match value in " + \
    #                            "+VMAMI '" + match[0] + "'"
    #            msg = msg + jobfile_example
    #            raise Exception(msg)
                
    #    if req == '+VMInstanceType':
    #        flavor=match[0]

    #    if req == '+VMAMIConfig':
    #        if match[0] != yaml_url:
    #            msg = '+VMAMIConfig must be set to:\n"%s"' % yaml_url
    #            raise Exception(msg)



    # Obtain a tenant for the user for auth purposes if none specified
    # We are going to use REST API directly as Python libraries don't
    # expose all functionality we need. This keystone client is a
    # convenient way to get a non-tenent-scoped token.
    if not auth['tenant_name']:
        keystone = ksclient.Client(username=auth['username'],
                                   password=auth['password'],
                                   auth_url=auth['auth_url'])

        token = keystone.auth_token
        headers = {'X-Auth-Token': token }
        tenant_url = auth['auth_url']+'/tenants'
        r = requests.get(tenant_url, headers=headers)
        tenant_data = r.json()
        if len(tenant_data['tenants']) > 0:
            tenant = tenant_data['tenants'][0]
            auth['tenant_name'] = tenant['name']
            if args.verbose:
                print "No tenant_id specified, so choosing %s" \
                    % auth['tenant_name']
        else:
            raise Exception('Unable to discover tenant_name. Please set')


    # parse image_uri and try to identify/verify its uuid
    part = image_uri.split(':',1)[1]
    try:
        # user provided uuid directly after canfar:
        image_uuid = uuid.UUID(part)
    except:
        try:
            # see if we have tenant_name/image_name
            (image_tenant_name,image_name) = part.split('/',1)
        except:
            raise Exception("image_uri '%s' is badly formed" % image_uri) 

        try:
            # get a keystone client scoped to this tenant                      
            k = ksclient.Client(username=auth['username'],
                                password=auth['password'],
                                tenant_name=image_tenant_name,
                                auth_url=auth['auth_url'])
            
            # get a glance client in the same tenant
            glance_endpoint = k.service_catalog.url_for(service_type='image')
            glance = glclient.Client(glance_endpoint, token=k.auth_token)
        except:
            raise Exception("Unable to gain access to tenant '%s'" \
                            % image_tenant_name)

        # Now look for a unique match to supplied image name
        matches = []
        for glanceimage in glance.images.list():
            if glanceimage['name'] == image_name:
                matches.append(glanceimage['id'])

        if len(matches) == 0:
            raise Exception("Couldn't find image named '%s'" % image_name)
        elif len(matches) > 1:
            errstr="Multiple image UUIDs in tenant '%s' match image name '%s':\n%s"\
                % (image_tenant_name, image_name, '\n'.join(matches))
            raise Exception(errstr)

        # unique image_uuid
        image_uuid = matches[0]

        if args.verbose:
            print "image_uuid: %s" % image_uuid

    # Check for a valid flavor
    nova = nclient.Client(auth['username'], auth['password'],
                          auth['tenant_name'], auth['auth_url'])

    flavors = nova.flavors.list()
    #good_flavors = []
    #bad_flavors = []
    #for f in flavors:
    #    if f.ephemeral:
    #        good_flavors.append(f.name)
    #    else:
    #        bad_flavors.append(f.name)
    #if not good_flavors:
    #    raise Exception("Error: cloud does not offer flavors with ephemeral partition!")

    #if flavor not in good_flavors:

    flavor_names = [f.name for f in flavors]
    if flavor not in flavor_names:
        msg = "Supplied flavor '%s' is not valid. Must be one of:\n"\
              % flavor
        msg = msg + ', '.join(flavor_names)
        raise Exception(msg)
        
except Exception as E:
    print "ERROR:",E
    sys.exit(1)


jobfile = '''
Requirements = VMType =?= "%s" && Arch == "x86_64"
+VMAMI          = "canfar:%s"
+VMInstanceType = "canfar:%s"
''' % (image_uuid,image_uuid,flavor) + jobfile_data

print jobfile

sys.exit(0)
