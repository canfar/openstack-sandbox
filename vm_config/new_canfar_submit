#!/bin/bash
#
# User script for submitting jobs. A wrapper for cansub,
# canfar_job_validate and condor_submit. Normally a user should just
# use cansub (without the --nopost option) so that the job goes
# through the web service. This script avoids the web service and can
# submit jobs directly on the head node for testing purposes.

EXEC_NAME=$(basename $0 .${0##*.})

die() {
    echo "${EXEC_NAME}: $1" 1>&2
    exit 1
}

usage() {
    echo $"Usage: ${EXEC_NAME} [jobfile] [image] [flavor]
Submit a CANFAR processing job.
  [jobfile]       Condor job description file
  [image]         VM image for job (name or ID)
  [flavor]        hardware flavor (name or ID)

Note: Prior to running this script the following OpenStack environment
variables must be set (e.g., by sourcing your openrc file):
  OS_AUTH_URL
  OS_USERNAME
  OS_PASSWORD
  OS_TENANT_NAME     (this must be the tenant that owns the image)      
"
    exit
}


[ "$#" -eq 3 ] || usage

JOBFILE=$1
IMAGE=$2
FLAVOR=$3

[[ -e ${JOBFILE} ]] || die "jobfile '${JOBFILE}' does not exist"

# Extract JOBSCRIPT from JOBFILE
JOBSCRIPT=`echo ${JOBFILE} | sed -r 's/^[^#]*Executable\s+=\s+(.*)$/\1/'` || die "could not search for 'Executable' in ${JOBFILE}"
[[ -z ${JOBSCRIPT} ]] && die "could not extract 'Executable' from ${JOBFILE}"
[[ -e ${JOBSCRIPT} ]] || die "Executable '${JOBSCRIPT}' from ${JOBFILE} does not exist"

# Call cansub with --nopost simply to share the image and translate image
# and flavor names to their IDs, which is what canfar_job_validate expects.
IMAGEID_AND_FLAVORID=`cansub ${JOBFILE} ${IMAGE} ${FLAVOR} --nopost` || die "failed to share image and determine image/flavor IDs"

JOB=`new_canfar_job_validate ${JOBFILE} ${JOBSCRIPT} ${IMAGEID_AND_FLAVORID}` || die "failed to validate jobfile: ${JOB}"

echo "${JOB}" | condor_submit || die "failed to submit job to queue"
