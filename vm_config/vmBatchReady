#!/bin/bash
#
# In the current plan batch processing in OpenStack clouds will be
# performed on behalf of the user by a special account in a batch
# processing project (tenant). The user will make their VM image
# available to this project by adding it explicitly as a "member"
# of the image.
#
# Unfortunately (at the time of OpenStack IceHouse) there is gap in
# the functionality of available user clients, and there is no way to
# add members to VM images in a multi-domain configured cloud. This
# feature is not available in the dashboard. python-keystoneclient
# does not support multi-domains. python-openstackclient supports
# multi-domain, but does not have member functionality yet. This script
# is therefore a stopgap until a better solution is found.
#
# Given user credentials and a VM image ID, add the batch project as a
# member using the REST API directly. See:
#   http://developer.openstack.org/api-ref-image-v1.html#members-v1

# --- configure these to match the operational OpenStack cloud -------
base_url=http://mach309.cadc.dao.nrc.ca
auth_url=${base_url}:5000/v3/
image_url=${base_url}:9292/v1/
domain=canfar
batch_project_id=1e20dbac49ac48edb812191defb17d6c

# only want errors reported
CURLCMD="curl -s -S"

# --- Parse command line ---------------------------------------------
if [[ $# != 3 ]]; then
    echo "usage:"
    echo "  vmBatchReady [username] [projectname] [vm_id]"
    exit 1
fi

username=$1
projectname=$2
vm_id=$3

echo "Please enter your Password: "
read -sr password


# --- Obtain a user token --------------------------------------------
curl_output=$($CURLCMD ${auth_url}/auth/tokens \
    -i \
    -H "Content-Type: application/json" \
    -d '
{
    "auth": {
        "identity": {
            "methods": [
                "password"
            ],
            "password": {
                "user": {
                    "domain": {
                        "name": "'${domain}'"
                    },
                    "name": "'${username}'",
                    "password": "'${password}'"
                }
            }
        },
        "scope": {
            "project": {
                "domain": {
                    "name": "'${domain}'"
                },
                "name": "'${projectname}'"
            }
        }
    }
}')

if [ "$?" == "0" ]; then
    # Check for a returned error code
    found_error=$(echo "${curl_output}" | grep '{"error":')
    if [ ! -z "${found_error}" ]; then
        echo "Could not obtain user token. Check credentials and projectname."
        echo "${found_error}"
        exit 1
    fi

    user_token=$(echo "${curl_output}" | \
        grep ^X-Subject-Token: | awk '{print $2}' )

    # Extra check: if this string empty something unknown went wrong
    if [ -z "${user_token}" ]; then
        echo "user_token is empty. Here is the response from curl:"
        echo "${curl_output}"
        exit 1
    fi
else
    # curl failed altogether
    echo "curl failed for some reason?"
    echo "${curl_output}"
    exit 1
fi


# --- Now share the requested VM with the batch project --------------
curl_output2=$($CURLCMD -i -X PUT \
    ${image_url}/images/${vm_id}/members/${batch_project_id} \
    -H "X-Auth-Token: ${user_token}")

# Don't expect anything if it worked
curl_ok=$(echo "${curl_output2}" | grep '204 No Content')

if [ -z "${curl_ok}" ]; then
    echo "Error sharing VM with the batch project:"
    echo "${curl_output2}"
    exit 1
fi

echo Success
exit 0
